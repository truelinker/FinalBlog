<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A career That&#39;s Real on Blogophonic</title>
    <link>http://localhost:1313/MyungBlog/career/</link>
    <description>Recent content in A career That&#39;s Real on Blogophonic</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/MyungBlog/career/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flash FileSystem</title>
      <link>http://localhost:1313/MyungBlog/career/filesystem/</link>
      <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/MyungBlog/career/filesystem/</guid>
      <description>Implmented a file system on a QSPI NOR Flash. Azura RTOS(aka, ThreadX) provides FileX/LevelX to help develop FAT16/32 file systems on flash memory. I used this API to implement a file system for firmware running on Azura RTOS(aka, ThreadX) over QSPI NOR flash memory.&#xA;Background knowledges FileX : FAT-compatible file system libraries. LevelX : Handle NAND or NOR flash memories managment for wear-leveling to increase the memory lifetime and support multiplie instances of NAND and/or NOR pairs.</description>
    </item>
    <item>
      <title>Flash Writer</title>
      <link>http://localhost:1313/MyungBlog/career/flashwriter/</link>
      <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/MyungBlog/career/flashwriter/</guid>
      <description>Implmented a flash writer. When we first bring up the board and nothing has been written to the flash memory, we need an application to write to the flash memory that will use the secondary boot loader to the flash memory. The Flash writer I developed does this.&#xA;Boot Sequence The bootloader in ROM has the simplest structure possible due to the ROM read-only nature and small size. The main purpose of this ROM bootloader is to load a secondary bootloader, RTOS, or a bare-matal program.</description>
    </item>
    <item>
      <title>NEON SIMD</title>
      <link>http://localhost:1313/MyungBlog/career/neonsimd/</link>
      <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/MyungBlog/career/neonsimd/</guid>
      <description>In order to reduce the execution time of the DPD (Digital Predistortion) algorithm, the code was optimized to use NEON registers, which enable execution of multiple data at once. Background knowledges DPD (Digital Predistortion) Digital Pre-Distortion(DPD) is a technique used to compensate for nonlinearities introduced by power amplifiers(PAs). DPD works by applying a predistortion to the input signal before it passes through the PA, effectively counteracting the nonlinear introduced by the amplifier.</description>
    </item>
    <item>
      <title>Layer 2 switch development</title>
      <link>http://localhost:1313/MyungBlog/career/ethernetswitch/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/MyungBlog/career/ethernetswitch/</guid>
      <description>When I was working at Dasan Networks ( https://en.wikipedia.org/wiki/DASAN_Networks ), I developed a Layer 2 switch device based on Dasan Networks&amp;rsquo; custom Linux using Broadcom and Marvell&amp;rsquo;s Layer 2 switch SoCs. In addition, I have developed DHCP and ARP and other functions. The following figure shows the Linux network stack of 24 port ethernet switch. Layer 2 switch SoCs provides basic functions such as RX/TX Ring Buffer and MAC address learning table as shown in the figure below.</description>
    </item>
    <item>
      <title>PCIe Device Driver</title>
      <link>http://localhost:1313/MyungBlog/career/pciedevicedriver/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/MyungBlog/career/pciedevicedriver/</guid>
      <description>Participated in the SSHDD development. A small-capacity SSD inside the HDD is a drive connected by a PCIe bus. So, frequently read data is stored on the SSD, so it is a drive with improved speed compared to the existing HDD. My part is PCIe AHCI drive driver development, because the SSD was used AHCI connected through PCIe bus.&#xA;The flow of the PCIe port initialziation PCIe controller initialization is done in the order shown below.</description>
    </item>
    <item>
      <title>Secure Drive</title>
      <link>http://localhost:1313/MyungBlog/career/secure-drive/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/MyungBlog/career/secure-drive/</guid>
      <description>Now I&amp;rsquo;m working at Western Digital as a firmware developer on a team that provides a common security engine for SSDs and HDDs. I am in charge of developing Security APIs so that the security engine provided by the team can be used according to the HDD characteristics. TCG protocols (TCG enterprise, opal, pyrite, etc). Sanitize ATA Security 1. [TCG] (https://nvmexpress.org/wp-content/uploads/TCGandNVMe_Joint_White_Paper-TCG_Storage_Opal_and_NVMe_FINAL.pdf) provides that data stored on HDDs or SSDs is self-encrypted under policy-based access control.</description>
    </item>
    <item>
      <title>Serial communication</title>
      <link>http://localhost:1313/MyungBlog/career/sio/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/MyungBlog/career/sio/</guid>
      <description>I developed a serial communication protocol. As for the background, as the tester that uses only a single serial bus was newly introduced, I had to change the firmware to use it with the tester that uses the existing dual serial bus, and I was in charge of developing the fimrware. The purpose of this project is to change the firmware to work with testers with different serial communication methods on the same firmware.</description>
    </item>
    <item>
      <title>SMR</title>
      <link>http://localhost:1313/MyungBlog/career/smr/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/MyungBlog/career/smr/</guid>
      <description>Participated in the drive managed SMR HDD development. Because the size of Read Header in HDD is smaller than Write Header, it is possible to write more densely when writing. This is the basic concept of SMR (Shingled Magnetic Recording). There are two main types of SMR HDDs: Host Managed SMR and Drive Managed SMR. The reason for dividing into two is that for SMR drives capable of only sequential write/read, the location of LBA and actual physical location is different each time it is written, so an indirection mapping table is needed for this.</description>
    </item>
  </channel>
</rss>
